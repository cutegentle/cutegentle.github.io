<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Laravel OAuth 2.0 X YouTube X bilibili</title>
    <link href="/2021/12/12/Laravel-OAuth-2-0-X-YouTube-X-bilibili/"/>
    <url>/2021/12/12/Laravel-OAuth-2-0-X-YouTube-X-bilibili/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Laravel-OAuth-2-0-X-YouTube-X-bilibili"><a href="#Laravel-OAuth-2-0-X-YouTube-X-bilibili" class="headerlink" title="Laravel OAuth 2.0  X YouTube X bilibili"></a>Laravel OAuth 2.0  X YouTube X bilibili</h4><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前几天突然手机微信出现了条YouTube视频链接。如下：</p><p><a href="https://www.youtube.com/watch?v=oJCImQWfCCM&amp;list=PLC-R40l2hJfdyfZ3jkDKOcyoqmIgw2wda&amp;index=2">https://www.youtube.com/watch?v=oJCImQWfCCM&amp;list=PLC-R40l2hJfdyfZ3jkDKOcyoqmIgw2wda&amp;index=2</a></p><p>打开一看，Build OAuth 2.0 SSO with PHP (Laravel 8)。近期一直在折腾基于php实现SSO，就点进去学习一波。</p><h4 id="学习见解"><a href="#学习见解" class="headerlink" title="学习见解"></a>学习见解</h4><p>看到第四个视频，结合相关知识自己理解了一下：</p><p>实际上就是laravel8中的官方扩展包，passport oauth里面的教程，采用的是OAuth2.0的授权码模式接下来我将做一些精华的笔记（废话+大白话）。实际上就是 <a href="https://www.bilibili.com/video/BV1ME411q7NA?p=8">https://www.bilibili.com/video/BV1ME411q7NA?p=8</a> 印度版。。。（话说印度人挺好学的，就是口音太xxxx）<br>注意在生产环境下（不要采用视频的全写在路由，而是要像YouTube中的写在专门的控制器下，route要简洁！）lishen的视频讲的不错，实际上laravel是可以提供oauth服务的。在纯净版的环境下，serve端就是类似于微信授权。我们自己起来的client端相当于是第三方app（可以是bilibili），在bilibli弄个login，上面附有微信登入连接，连接则路由到我们的serve端的login，serve首先要login也就是（常见的点击确定微信登入），登入后就会到oaut/authorize也就是passport注册路由，那么会出现是否授权的页面（也就是确定微信登入后的是否授权）授权了url参数auth/callback+code+state ;如果按了取消没有授权就是error+state。他自己写了一个callback的相应页面来进行成功授权是否的不同逻辑。可以弹出拒接的框等。点击授权后会报错因为没有写get/token这个应该是laravel他自己csrf什么的问题，这个照抄文档就可以。主要问题在于laravel这种客户端要手动授权。。client 以及他的密码。</p><h4 id="另："><a href="#另：" class="headerlink" title="另："></a>另：</h4><p>Laravel Jetstream 除了提供基于浏览器的 Cookie 认证外，还内置集成了 Laravel Sanctum 提供 API 令牌认证。现在主要的问题在于，jetstream套件本身深不可测，自带sanctum，我现在又要使用passport这个api认证，理论上讲是没有问题，但是能否接入，问题还是很大的，而且目前市面上没有提供api认证后的退出demo，accesstoken也不是很全。而且我只能选择passport只有它能够提供oauth，这样一来要弃用jetstream中的sanctum，有得要重新搞懂内嵌在jetstream中sanctum，将其弃用转用passport这是个很大的问题。具体实现来说，复制一个mauth当做测试按照lishen的来进行安装passport看看会不会冲突，实际上只要mauth正常运行，新起一个客户端就是小问题。注意要好好看youtube上面新建的项目实际上就是lishen的，好好看看数据库里面字段的变化，测试环境需要把mauth的脚本先保存。</p><h4 id="深入学习链接"><a href="#深入学习链接" class="headerlink" title="深入学习链接"></a>深入学习链接</h4><p><a href="https://laravelacademy.org/post/21991">https://laravelacademy.org/post/21991</a> 用户认证小了解关于自定义模型 在其中搜AuthServiceProvider<br><a href="https://laravelacademy.org/post/22035">https://laravelacademy.org/post/22035</a> oauth + passport详解讲的很好，在其中搜AuthServiceProvider</p>]]></content>
    
    
    <categories>
      
      <category>laravel，php，oauth</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid x APlayer</title>
    <link href="/2021/10/01/Fluid-x-APlayer/"/>
    <url>/2021/10/01/Fluid-x-APlayer/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此篇分享如何在Fluid主题下添加音乐插件。Fluid x APlayer。</p><span id="more"></span><h4 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h4><p>APlayer中文文档 <a href="https://aplayer.js.org/#/zh-Hans/">https://aplayer.js.org/#/zh-Hans/</a></p><p>hexo-tag-aplayer文档 <a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a></p><h4 id="推荐步骤"><a href="#推荐步骤" class="headerlink" title="推荐步骤"></a>推荐步骤</h4><ol><li><p>在hexo博客的文件夹根目录打开git bash，输入如下命令安装插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">npm install --save hexo-tag-aplayer<br><br>//安装完，将~node_modules\aplayer\dist文件copy至主题的source目录下<br></code></pre></td></tr></table></figure></li><li><p>在Fluid主题目录中，source目录下新建js文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ap = <span class="hljs-keyword">new</span> APlayer(&#123;<br>    <span class="hljs-attr">container</span>: <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;aplayer&#x27;</span>),<br><span class="hljs-attr">volume</span>: <span class="hljs-number">0.5</span>,<br>    <span class="hljs-attr">fixed</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//自动播放</span><br>    <span class="hljs-attr">audio</span>: [<br>&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Talking to the Moon&#x27;</span>,<br>        <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;Bruno Mars&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;, <br>]<br>&#125;);<br><span class="hljs-comment">//具体参数学习请看APlayer官方文档（已在学习链接中）</span><br><span class="hljs-comment">//简述一下关键：url填音乐的真实外部链接。cover就是封面图片真实链接。</span><br></code></pre></td></tr></table></figure></li><li><p>得到指定音乐的url与cover参数。（只以网易云音乐为例</p><p>打开网易云音乐网页版，随便找到一首歌，播放。他的url形如： <a href="https://music.163.com/#/song?id=28952146">https://music.163.com/#/song?id=28952146</a> 。然后将前者的id值套用到后者链接中xxxxxx位置 <a href="http://music.163.com/song/media/outer/url?id=xxxxxxx.mp3">http://music.163.com/song/media/outer/url?id=xxxxxxx.mp3</a> 。通过后者访问到的，重新生成的url就是其真实链接，也就是我们要填的url。对于获取cover，直接在网页版的cover图片上右击检查，鼠标放在cover上即可获得。</p></li><li><p>主题配置</p><p>在fluid主题配置文件_config.yml文件中搜索：custom_html.在其单引号中加入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;/dist/APlayer.min.css&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/你命名的.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>hexo clean — hexo g — hexo d</p></li></ol><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>fluid主题不支持pjax。自行DIY会出现诸多问题。音乐无法在跳转页面后继续播放。建议选择适合的音乐。</p>]]></content>
    
    
    <categories>
      
      <category>blog美化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
      <tag>aplayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test_my_site</title>
    <link href="/2020/12/14/test-my-site/"/>
    <url>/2020/12/14/test-my-site/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一篇平淡无奇且无内容的测试罢了。</p><span id="more"></span><p>嘻嘻</p><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">综合演示<br>优雅使用 Fluid 写文章 test效果</p>]]></content>
    
    
    <categories>
      
      <category>hexo测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
      <tag>hexo init</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/12/hello-world/"/>
    <url>/2020/12/12/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git Merge</title>
    <link href="/2020/10/11/Git-merge/"/>
    <url>/2020/10/11/Git-merge/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此篇介绍Git操作之merge。</p><span id="more"></span><h3 id="Git-merge-合并-commits"><a href="#Git-merge-合并-commits" class="headerlink" title="Git merge:合并 commits"></a>Git merge:合并 commits</h3><p>merge 的意思是「合并」，它做的事也是合并: 指定一个 commit ，把它合并到当前的 commit 来。具体来讲， merge 做的事是:从目标 commit 和当前 commit (即 HEAD 所 指向的 commit )分叉的位置起，把目标commit 的路径上的所有 commit 的内容一并应用到当前 commit ，然后自动生成一个新的commit。</p><p>一般来说在master上操作： <code>git merge branch</code>  这样branch会合并到master上，实际操作是两者均延伸出一个新commit进行相交。</p><p><strong>merge的使用场景</strong></p><ol><li><p>就是合并分支</p></li><li><p>pull的内部操作：pull的实际操作其实是把远端仓库的内容用fetch取下来之后，用merge来合并。</p></li></ol><p><strong>特殊情况1：冲突</strong></p><p>首先两个分支改了同一个文件不同地方，merge会自动合并。但是该了相同地方就会产生冲突。他会提示你那里冲突。现在我们就需要做两件事情：1. 解决冲突;  2. 手动commit一下</p><p>对于前者来说：再打开冲突文件看一下。内容会改变。Git虽然无法处理冲突，但是他把两个分支冲突的内容放在一起，并用符号标记出他们的边界以及出处。</p><img src="/2020/10/11/Git-merge/gitmerge1.png" style="zoom:30%;"><p>我们如何操作呢？假设你要保留HEAD的修改，那么只要删除feature1的修改，再把辅助文字符号删除，保存退出就可以。<img src="/2020/10/11/Git-merge/gitmerge2.png" style="zoom:40%;">         (当然也可以选择更方便的merge工具来解决冲突。</p><p>对于后者来说：解决完冲突之后就要进行第二步，commit了。commit冲突文件。被冲突中断的merge在手动commit时候依旧会自动填写提交信息不用奇怪。我们先前的Git仓库都处于冲突待解决的中间状态，如果不解决冲突，也可以选择<code>merge --abort</code>来手动取消merge以达到merge前的状态。</p><p><strong>特殊情况2：HEAD领先于目标commit</strong></p><p>merge时，目标commit和HEAD处commit不存在分叉，而是单纯一条线上，且HEAD领先目标commit。此情况merge空操作。</p><p><strong>特殊情况3：HEAD落后于目标commit (fast-forward</strong> </p><p>Git会直接把HEAD以及他所指向的branch移动到目标commit。也就是前移罢了。看似此情况很少见，其实这种情况十分常见。因为这其实就是pull操作的一种经典：本地的master没有新提交，而远端仓库中有同事提交新内容到master。如果这时候在本地执行一次pull操作，就会由于HEAD落后于目标commit（也就是origin master）而造成fast-forward。而 <code>git pull</code> 的第二步操作 <code>merge</code> 的目标 <code>commit</code> ，是远端仓库的 <code>HEAD</code>，也就是 <code>origin/HEAD</code> ，所以 <code>git pull</code> 的第二步的完整内容是：<code>git merge origin/HEAD</code></p><p><strong>小总结：</strong></p><ol><li><code>merge</code> 的含义：从两个 <code>commit</code>「分叉」的位置起，把目标 <code>commit</code> 的内容应用到当前 <code>commit</code>（<code>HEAD</code> 所指向的 <code>commit</code>），并生成一个新的 <code>commit</code>；</li><li>merge的适用场景：<ol><li>单独开发的 <code>branch</code> 用完了以后，合并回原先的 <code>branch</code>；</li><li><code>git pull</code> 的内部自动操作。</li></ol></li><li>merge的三种特殊情况：<ol><li>冲突<ol><li>原因：当前分支和目标分支修改了同一部分内容，Git 无法确定应该怎样合并；</li><li>应对方法：解决冲突后手动 <code>commit</code>。</li></ol></li><li><code>HEAD</code> 领先于目标 <code>commit</code>：Git 什么也不做，空操作；</li><li><code>HEAD</code> 落后于目标 <code>commit</code>：fast-forward。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>merge</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
