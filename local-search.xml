<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test_my_site</title>
    <link href="/2021/12/14/test-my-site/"/>
    <url>/2021/12/14/test-my-site/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/14/hello-world/"/>
    <url>/2021/12/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Laravel OAuth 2.0 X YouTube X bilibili</title>
    <link href="/2021/12/12/Laravel-OAuth-2-0-X-YouTube-X-bilibili/"/>
    <url>/2021/12/12/Laravel-OAuth-2-0-X-YouTube-X-bilibili/</url>
    
    <content type="html"><![CDATA[<h4 id="Laravel-OAuth-2-0-X-YouTube-X-bilibili"><a href="#Laravel-OAuth-2-0-X-YouTube-X-bilibili" class="headerlink" title="Laravel OAuth 2.0  X YouTube X bilibili"></a>Laravel OAuth 2.0  X YouTube X bilibili</h4><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前几天突然手机微信出现了条YouTube视频链接。如下：</p><p><a href="https://www.youtube.com/watch?v=oJCImQWfCCM&amp;list=PLC-R40l2hJfdyfZ3jkDKOcyoqmIgw2wda&amp;index=2">https://www.youtube.com/watch?v=oJCImQWfCCM&amp;list=PLC-R40l2hJfdyfZ3jkDKOcyoqmIgw2wda&amp;index=2</a></p><p>打开一看，Build OAuth 2.0 SSO with PHP (Laravel 8)。近期一直在折腾基于php实现SSO，就点进去学习一波。</p><h4 id="学习见解"><a href="#学习见解" class="headerlink" title="学习见解"></a>学习见解</h4><p>看到第四个视频，结合相关知识自己理解了一下：</p><p>实际上就是laravel8中的官方扩展包，passport oauth里面的教程，采用的是OAuth2.0的授权码模式接下来我将做一些精华的笔记（废话+大白话）。实际上就是 <a href="https://www.bilibili.com/video/BV1ME411q7NA?p=8">https://www.bilibili.com/video/BV1ME411q7NA?p=8</a> 印度版。。。（话说印度人挺好学的，就是口音太xxxx）<br>注意在生产环境下（不要采用视频的全写在路由，而是要像YouTube中的写在专门的控制器下，route要简洁！）lishen的视频讲的不错，实际上laravel是可以提供oauth服务的。在纯净版的环境下，serve端就是类似于微信授权。我们自己起来的client端相当于是第三方app（可以是bilibili），在bilibli弄个login，上面附有微信登入连接，连接则路由到我们的serve端的login，serve首先要login也就是（常见的点击确定微信登入），登入后就会到oaut/authorize也就是passport注册路由，那么会出现是否授权的页面（也就是确定微信登入后的是否授权）授权了url参数auth/callback+code+state ;如果按了取消没有授权就是error+state。他自己写了一个callback的相应页面来进行成功授权是否的不同逻辑。可以弹出拒接的框等。点击授权后会报错因为没有写get/token这个应该是laravel他自己csrf什么的问题，这个照抄文档就可以。主要问题在于laravel这种客户端要手动授权。。client 以及他的密码。</p><h4 id="另："><a href="#另：" class="headerlink" title="另："></a>另：</h4><p>Laravel Jetstream 除了提供基于浏览器的 Cookie 认证外，还内置集成了 Laravel Sanctum 提供 API 令牌认证。现在主要的问题在于，jetstream套件本身深不可测，自带sanctum，我现在又要使用passport这个api认证，理论上讲是没有问题，但是能否接入，问题还是很大的，而且目前市面上没有提供api认证后的退出demo，accesstoken也不是很全。而且我只能选择passport只有它能够提供oauth，这样一来要弃用jetstream中的sanctum，有得要重新搞懂内嵌在jetstream中sanctum，将其弃用转用passport这是个很大的问题。具体实现来说，复制一个mauth当做测试按照lishen的来进行安装passport看看会不会冲突，实际上只要mauth正常运行，新起一个客户端就是小问题。注意要好好看youtube上面新建的项目实际上就是lishen的，好好看看数据库里面字段的变化，测试环境需要把mauth的脚本先保存。</p><h4 id="深入学习链接"><a href="#深入学习链接" class="headerlink" title="深入学习链接"></a>深入学习链接</h4><p><a href="https://laravelacademy.org/post/21991">https://laravelacademy.org/post/21991</a> 用户认证小了解关于自定义模型 在其中搜AuthServiceProvider<br><a href="https://laravelacademy.org/post/22035">https://laravelacademy.org/post/22035</a> oauth + passport详解讲的很好，在其中搜AuthServiceProvider</p>]]></content>
    
    
    <categories>
      
      <category>laravel，php，oauth</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
